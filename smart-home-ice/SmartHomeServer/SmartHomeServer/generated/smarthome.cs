//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `smarthome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace SmartHome
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial struct Time
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public int hours;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public int minutes;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public int seconds;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public Time(int hours, int minutes, int seconds)
        {
            this.hours = hours;
            this.minutes = minutes;
            this.seconds = seconds;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::SmartHome::Time");
            global::IceInternal.HashUtil.hashAdd(ref h_, hours);
            global::IceInternal.HashUtil.hashAdd(ref h_, minutes);
            global::IceInternal.HashUtil.hashAdd(ref h_, seconds);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override bool Equals(object other)
        {
            if(!(other is Time))
            {
                return false;
            }
            Time o = (Time)other;
            if(!this.hours.Equals(o.hours))
            {
                return false;
            }
            if(!this.minutes.Equals(o.minutes))
            {
                return false;
            }
            if(!this.seconds.Equals(o.seconds))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator==(Time lhs, Time rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator!=(Time lhs, Time rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeInt(this.hours);
            ostr.writeInt(this.minutes);
            ostr.writeInt(this.seconds);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.hours = istr.readInt();
            this.minutes = istr.readInt();
            this.seconds = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static void ice_write(global::Ice.OutputStream ostr, Time v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static Time ice_read(global::Ice.InputStream istr)
        {
            var v = new Time();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial struct TemperatureRequest
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public float temperature;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public Time start;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public Time duration;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public TemperatureRequest(float temperature, Time start, Time duration)
        {
            this.temperature = temperature;
            this.start = start;
            this.duration = duration;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::SmartHome::TemperatureRequest");
            global::IceInternal.HashUtil.hashAdd(ref h_, temperature);
            global::IceInternal.HashUtil.hashAdd(ref h_, start);
            global::IceInternal.HashUtil.hashAdd(ref h_, duration);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override bool Equals(object other)
        {
            if(!(other is TemperatureRequest))
            {
                return false;
            }
            TemperatureRequest o = (TemperatureRequest)other;
            if(!this.temperature.Equals(o.temperature))
            {
                return false;
            }
            if(!this.start.Equals(o.start))
            {
                return false;
            }
            if(!this.duration.Equals(o.duration))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator==(TemperatureRequest lhs, TemperatureRequest rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator!=(TemperatureRequest lhs, TemperatureRequest rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeFloat(this.temperature);
            this.start.ice_writeMembers(ostr);
            this.duration.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.temperature = istr.readFloat();
            this.start.ice_readMembers(istr);
            this.duration.ice_readMembers(istr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static void ice_write(global::Ice.OutputStream ostr, TemperatureRequest v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static TemperatureRequest ice_read(global::Ice.InputStream istr)
        {
            var v = new TemperatureRequest();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public enum OvenProgram
    {
        TurnedOff,
        HotAir,
        Grill,
        ConvectionBaking
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public sealed class OvenProgramHelper
    {
        public static void write(global::Ice.OutputStream ostr, OvenProgram v)
        {
            ostr.writeEnum((int)v, 3);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static OvenProgram read(global::Ice.InputStream istr)
        {
            OvenProgram v;
            v = (OvenProgram)istr.readEnum(3);
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public enum SensorState
    {
        Ok,
        Warning,
        Alarm
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public sealed class SensorStateHelper
    {
        public static void write(global::Ice.OutputStream ostr, SensorState v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static SensorState read(global::Ice.InputStream istr)
        {
            SensorState v;
            v = (SensorState)istr.readEnum(2);
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class UnsuccessfulOperationException : global::Ice.UserException
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public string reason;

        #endregion

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        private void _initDM()
        {
            this.reason = "";
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public UnsuccessfulOperationException()
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public UnsuccessfulOperationException(global::System.Exception ex) : base(ex)
        {
            _initDM();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public UnsuccessfulOperationException(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
            this.reason = info.GetString("reason");
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        private void _initDM(string reason)
        {
            this.reason = reason;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public UnsuccessfulOperationException(string reason)
        {
            _initDM(reason);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public UnsuccessfulOperationException(string reason, global::System.Exception ex) : base(ex)
        {
            _initDM(reason);
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override string ice_id()
        {
            return "::SmartHome::UnsuccessfulOperationException";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::SmartHome::UnsuccessfulOperationException");
            global::IceInternal.HashUtil.hashAdd(ref h_, reason);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            UnsuccessfulOperationException o = other as UnsuccessfulOperationException;
            if(o == null)
            {
                return false;
            }
            if(this.reason == null)
            {
                if(o.reason != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.reason.Equals(o.reason))
                {
                    return false;
                }
            }
            return true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public override void GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("reason", this.reason == null ? "" : this.reason);

            base.GetObjectData(info, context);
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator==(UnsuccessfulOperationException lhs, UnsuccessfulOperationException rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public static bool operator!=(UnsuccessfulOperationException lhs, UnsuccessfulOperationException rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::SmartHome::UnsuccessfulOperationException", -1, true);
            ostr_.writeString(reason);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            reason = istr_.readString();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SmartRoom : global::Ice.Object, SmartRoomOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SmartBuilding : global::Ice.Object, SmartBuildingOperations_, SmartRoom
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Device : global::Ice.Object, DeviceOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TemperatureController : global::Ice.Object, TemperatureControllerOperations_, Device
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Oven : global::Ice.Object, OvenOperations_, TemperatureController
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface AirConditioning : global::Ice.Object, AirConditioningOperations_, TemperatureController
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SolarPanelCluster : global::Ice.Object, SolarPanelClusterOperations_, Device
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Refrigerator : global::Ice.Object, RefrigeratorOperations_, Device
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Sensor : global::Ice.Object, SensorOperations_, Device
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface TemperatureSensor : global::Ice.Object, TemperatureSensorOperations_, Sensor
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface AirQualitySensor : global::Ice.Object, AirQualitySensorOperations_, Sensor
    {
    }
}

namespace SmartHome
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_SmartRoom_GetName(string ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_SmartRoom_GetDevicesNames(string[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_SmartBuilding_GetRoomsNames(string[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_SmartBuilding_GetTypeOfDevice(string ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_Device_GetName(string ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_Device_GetEnergyConsumption(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_TemperatureController_RequestTemperature();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_TemperatureController_GetTemperature(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_Oven_SetProgram();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_Oven_GetProgram(OvenProgram ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_AirConditioning_GetFilterQuality(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_SolarPanelCluster_PredictDailyProduction(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_Refrigerator_GetProductList(string[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_Refrigerator_AddProduct();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_Refrigerator_RemoveProduct();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_Sensor_GetState(SensorState ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_TemperatureSensor_GetTemperarure(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public delegate void Callback_AirQualitySensor_GetPollution(float ret);
}

namespace SmartHome
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface SmartRoomPrx : global::Ice.ObjectPrx
    {
        string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SmartRoom_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_GetName(global::Ice.AsyncResult asyncResult);

        string[] GetDevicesNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string[]> GetDevicesNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SmartRoom_GetDevicesNames> begin_GetDevicesNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetDevicesNames(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetDevicesNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string[] end_GetDevicesNames(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface SmartBuildingPrx : SmartRoomPrx
    {
        string[] GetRoomsNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string[]> GetRoomsNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SmartBuilding_GetRoomsNames> begin_GetRoomsNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetRoomsNames(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetRoomsNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string[] end_GetRoomsNames(global::Ice.AsyncResult asyncResult);

        string GetTypeOfDevice(string deviceName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string> GetTypeOfDeviceAsync(string deviceName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SmartBuilding_GetTypeOfDevice> begin_GetTypeOfDevice(string deviceName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetTypeOfDevice(string deviceName, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetTypeOfDevice(string deviceName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_GetTypeOfDevice(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface DevicePrx : global::Ice.ObjectPrx
    {
        string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_GetName(global::Ice.AsyncResult asyncResult);

        float GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> GetEnergyConsumptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_GetEnergyConsumption(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface TemperatureControllerPrx : DevicePrx
    {
        void RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task RequestTemperatureAsync(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TemperatureController_RequestTemperature> begin_RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_RequestTemperature(TemperatureRequest request, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_RequestTemperature(global::Ice.AsyncResult asyncResult);

        float GetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> GetTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TemperatureController_GetTemperature> begin_GetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetTemperature(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_GetTemperature(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface OvenPrx : TemperatureControllerPrx
    {
        void SetProgram(OvenProgram program, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task SetProgramAsync(OvenProgram program, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Oven_SetProgram> begin_SetProgram(OvenProgram program, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_SetProgram(OvenProgram program, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_SetProgram(OvenProgram program, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_SetProgram(global::Ice.AsyncResult asyncResult);

        OvenProgram GetProgram(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<OvenProgram> GetProgramAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Oven_GetProgram> begin_GetProgram(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetProgram(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetProgram(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        OvenProgram end_GetProgram(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface AirConditioningPrx : TemperatureControllerPrx
    {
        float GetFilterQuality(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> GetFilterQualityAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_AirConditioning_GetFilterQuality> begin_GetFilterQuality(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetFilterQuality(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetFilterQuality(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_GetFilterQuality(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface SolarPanelClusterPrx : DevicePrx
    {
        float PredictDailyProduction(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> PredictDailyProductionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SolarPanelCluster_PredictDailyProduction> begin_PredictDailyProduction(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_PredictDailyProduction(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_PredictDailyProduction(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_PredictDailyProduction(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface RefrigeratorPrx : DevicePrx
    {
        string[] GetProductList(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string[]> GetProductListAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Refrigerator_GetProductList> begin_GetProductList(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetProductList(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetProductList(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string[] end_GetProductList(global::Ice.AsyncResult asyncResult);

        void AddProduct(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task AddProductAsync(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Refrigerator_AddProduct> begin_AddProduct(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_AddProduct(string product, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_AddProduct(string product, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_AddProduct(global::Ice.AsyncResult asyncResult);

        void RemoveProduct(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task RemoveProductAsync(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Refrigerator_RemoveProduct> begin_RemoveProduct(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_RemoveProduct(string product, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_RemoveProduct(string product, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_RemoveProduct(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface SensorPrx : DevicePrx
    {
        SensorState GetState(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<SensorState> GetStateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Sensor_GetState> begin_GetState(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetState(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetState(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        SensorState end_GetState(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface TemperatureSensorPrx : SensorPrx
    {
        float GetTemperarure(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> GetTemperarureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_TemperatureSensor_GetTemperarure> begin_GetTemperarure(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetTemperarure(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetTemperarure(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_GetTemperarure(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface AirQualitySensorPrx : SensorPrx
    {
        float GetPollution(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> GetPollutionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_AirQualitySensor_GetPollution> begin_GetPollution(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_GetPollution(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_GetPollution(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_GetPollution(global::Ice.AsyncResult asyncResult);
    }
}

namespace SmartHome
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface SmartRoomOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        string GetName(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        string[] GetDevicesNames(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface SmartBuildingOperations_ : SmartRoomOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        string[] GetRoomsNames(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        string GetTypeOfDevice(string deviceName, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface DeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        string GetName(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        float GetEnergyConsumption(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface TemperatureControllerOperations_ : DeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        void RequestTemperature(TemperatureRequest request, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        float GetTemperature(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface OvenOperations_ : TemperatureControllerOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        void SetProgram(OvenProgram program, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        OvenProgram GetProgram(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface AirConditioningOperations_ : TemperatureControllerOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        float GetFilterQuality(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface SolarPanelClusterOperations_ : DeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        float PredictDailyProduction(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface RefrigeratorOperations_ : DeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        string[] GetProductList(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        void AddProduct(string product, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        void RemoveProduct(string product, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface SensorOperations_ : DeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        SensorState GetState(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface TemperatureSensorOperations_ : SensorOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        float GetTemperarure(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public interface AirQualitySensorOperations_ : SensorOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        float GetPollution(global::Ice.Current current = null);
    }
}

namespace SmartHome
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public sealed class ListHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class SmartRoomPrxHelper : global::Ice.ObjectPrxHelperBase, SmartRoomPrx
    {
        public SmartRoomPrxHelper()
        {
        }

        public SmartRoomPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] GetDevicesNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetDevicesNamesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetName_name = "GetName";

        private void _iceI_GetName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetName_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> GetDevicesNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetDevicesNamesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_GetDevicesNamesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetDevicesNames_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_GetDevicesNames(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetDevicesNames_name = "GetDevicesNames";

        private void _iceI_GetDevicesNames(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _GetDevicesNames_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = ListHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SmartRoom_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(context, callback, cookie, false);
        }

        public string end_GetName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartRoom_GetName> begin_GetName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartRoom_GetName, string>(
                (Callback_SmartRoom_GetName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetName_name, cookie, completedCallback);
            _iceI_GetName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartRoom_GetDevicesNames> begin_GetDevicesNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetDevicesNames(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetDevicesNames(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetDevicesNames(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetDevicesNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetDevicesNames(context, callback, cookie, false);
        }

        public string[] end_GetDevicesNames(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetDevicesNames_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartRoom_GetDevicesNames> begin_GetDevicesNames(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetDevicesNames_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartRoom_GetDevicesNames, string[]>(
                (Callback_SmartRoom_GetDevicesNames cb, string[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetDevicesNames_name, cookie, completedCallback);
            _iceI_GetDevicesNames(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SmartRoomPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SmartRoomPrx r = b as SmartRoomPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SmartRoomPrxHelper h = new SmartRoomPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SmartRoomPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SmartRoomPrx r = b as SmartRoomPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SmartRoomPrxHelper h = new SmartRoomPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SmartRoomPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SmartRoomPrxHelper h = new SmartRoomPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SmartRoomPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SmartRoomPrxHelper h = new SmartRoomPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SmartRoomPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SmartRoomPrx r = b as SmartRoomPrx;
            if(r == null)
            {
                SmartRoomPrxHelper h = new SmartRoomPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SmartRoomPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SmartRoomPrxHelper h = new SmartRoomPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::SmartRoom"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SmartRoomPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SmartRoomPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SmartRoomPrxHelper result = new SmartRoomPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class SmartBuildingPrxHelper : global::Ice.ObjectPrxHelperBase, SmartBuildingPrx
    {
        public SmartBuildingPrxHelper()
        {
        }

        public SmartBuildingPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] GetDevicesNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetDevicesNamesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] GetRoomsNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetRoomsNamesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string GetTypeOfDevice(string deviceName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetTypeOfDeviceAsync(deviceName, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetName_name = "GetName";

        private void _iceI_GetName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetName_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> GetDevicesNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetDevicesNamesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_GetDevicesNamesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetDevicesNames_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_GetDevicesNames(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetDevicesNames_name = "GetDevicesNames";

        private void _iceI_GetDevicesNames(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _GetDevicesNames_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = ListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> GetRoomsNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetRoomsNamesAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_GetRoomsNamesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetRoomsNames_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_GetRoomsNames(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetRoomsNames_name = "GetRoomsNames";

        private void _iceI_GetRoomsNames(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _GetRoomsNames_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = ListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string> GetTypeOfDeviceAsync(string deviceName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetTypeOfDeviceAsync(deviceName, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetTypeOfDeviceAsync(string iceP_deviceName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetTypeOfDevice_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetTypeOfDevice(iceP_deviceName, context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetTypeOfDevice_name = "GetTypeOfDevice";

        private void _iceI_GetTypeOfDevice(string iceP_deviceName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetTypeOfDevice_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_deviceName);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SmartRoom_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(context, callback, cookie, false);
        }

        public string end_GetName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartRoom_GetName> begin_GetName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartRoom_GetName, string>(
                (Callback_SmartRoom_GetName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetName_name, cookie, completedCallback);
            _iceI_GetName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartRoom_GetDevicesNames> begin_GetDevicesNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetDevicesNames(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetDevicesNames(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetDevicesNames(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetDevicesNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetDevicesNames(context, callback, cookie, false);
        }

        public string[] end_GetDevicesNames(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetDevicesNames_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartRoom_GetDevicesNames> begin_GetDevicesNames(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetDevicesNames_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartRoom_GetDevicesNames, string[]>(
                (Callback_SmartRoom_GetDevicesNames cb, string[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetDevicesNames_name, cookie, completedCallback);
            _iceI_GetDevicesNames(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartBuilding_GetRoomsNames> begin_GetRoomsNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetRoomsNames(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetRoomsNames(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetRoomsNames(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetRoomsNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetRoomsNames(context, callback, cookie, false);
        }

        public string[] end_GetRoomsNames(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetRoomsNames_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartBuilding_GetRoomsNames> begin_GetRoomsNames(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetRoomsNames_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartBuilding_GetRoomsNames, string[]>(
                (Callback_SmartBuilding_GetRoomsNames cb, string[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetRoomsNames_name, cookie, completedCallback);
            _iceI_GetRoomsNames(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartBuilding_GetTypeOfDevice> begin_GetTypeOfDevice(string deviceName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetTypeOfDevice(deviceName, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetTypeOfDevice(string deviceName, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetTypeOfDevice(deviceName, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetTypeOfDevice(string deviceName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetTypeOfDevice(deviceName, context, callback, cookie, false);
        }

        public string end_GetTypeOfDevice(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetTypeOfDevice_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartBuilding_GetTypeOfDevice> begin_GetTypeOfDevice(string iceP_deviceName, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetTypeOfDevice_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartBuilding_GetTypeOfDevice, string>(
                (Callback_SmartBuilding_GetTypeOfDevice cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetTypeOfDevice_name, cookie, completedCallback);
            _iceI_GetTypeOfDevice(iceP_deviceName, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SmartBuildingPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SmartBuildingPrx r = b as SmartBuildingPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SmartBuildingPrxHelper h = new SmartBuildingPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SmartBuildingPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SmartBuildingPrx r = b as SmartBuildingPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SmartBuildingPrxHelper h = new SmartBuildingPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SmartBuildingPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SmartBuildingPrxHelper h = new SmartBuildingPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SmartBuildingPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SmartBuildingPrxHelper h = new SmartBuildingPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SmartBuildingPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SmartBuildingPrx r = b as SmartBuildingPrx;
            if(r == null)
            {
                SmartBuildingPrxHelper h = new SmartBuildingPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SmartBuildingPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SmartBuildingPrxHelper h = new SmartBuildingPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::SmartBuilding",
            "::SmartHome::SmartRoom"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SmartBuildingPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SmartBuildingPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SmartBuildingPrxHelper result = new SmartBuildingPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class DevicePrxHelper : global::Ice.ObjectPrxHelperBase, DevicePrx
    {
        public DevicePrxHelper()
        {
        }

        public DevicePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetEnergyConsumptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetName_name = "GetName";

        private void _iceI_GetName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetName_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetEnergyConsumptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetEnergyConsumptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetEnergyConsumptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetEnergyConsumption_name = "GetEnergyConsumption";

        private void _iceI_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetEnergyConsumption_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(context, callback, cookie, false);
        }

        public string end_GetName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetName, string>(
                (Callback_Device_GetName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetName_name, cookie, completedCallback);
            _iceI_GetName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetEnergyConsumption(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(context, callback, cookie, false);
        }

        public float end_GetEnergyConsumption(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetEnergyConsumption_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetEnergyConsumption, float>(
                (Callback_Device_GetEnergyConsumption cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetEnergyConsumption_name, cookie, completedCallback);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static DevicePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DevicePrx r = b as DevicePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                DevicePrxHelper h = new DevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DevicePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            DevicePrx r = b as DevicePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                DevicePrxHelper h = new DevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DevicePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    DevicePrxHelper h = new DevicePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DevicePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    DevicePrxHelper h = new DevicePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DevicePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DevicePrx r = b as DevicePrx;
            if(r == null)
            {
                DevicePrxHelper h = new DevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DevicePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            DevicePrxHelper h = new DevicePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, DevicePrx v)
        {
            ostr.writeProxy(v);
        }

        public static DevicePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                DevicePrxHelper result = new DevicePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class TemperatureControllerPrxHelper : global::Ice.ObjectPrxHelperBase, TemperatureControllerPrx
    {
        public TemperatureControllerPrxHelper()
        {
        }

        public TemperatureControllerPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetEnergyConsumptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_RequestTemperatureAsync(request, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetTemperatureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetName_name = "GetName";

        private void _iceI_GetName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetName_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetEnergyConsumptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetEnergyConsumptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetEnergyConsumptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetEnergyConsumption_name = "GetEnergyConsumption";

        private void _iceI_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetEnergyConsumption_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task RequestTemperatureAsync(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_RequestTemperatureAsync(request, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_RequestTemperatureAsync(TemperatureRequest iceP_request, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_RequestTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_RequestTemperature(iceP_request, context, synchronous, completed);
            return completed.Task;
        }

        private const string _RequestTemperature_name = "RequestTemperature";

        private void _iceI_RequestTemperature(TemperatureRequest iceP_request, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _RequestTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_request.ice_writeMembers(ostr);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(UnsuccessfulOperationException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<float> GetTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetTemperatureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetTemperatureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetTemperature(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetTemperature_name = "GetTemperature";

        private void _iceI_GetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(context, callback, cookie, false);
        }

        public string end_GetName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetName, string>(
                (Callback_Device_GetName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetName_name, cookie, completedCallback);
            _iceI_GetName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetEnergyConsumption(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(context, callback, cookie, false);
        }

        public float end_GetEnergyConsumption(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetEnergyConsumption_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetEnergyConsumption, float>(
                (Callback_Device_GetEnergyConsumption cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetEnergyConsumption_name, cookie, completedCallback);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TemperatureController_RequestTemperature> begin_RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_RequestTemperature(request, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_RequestTemperature(TemperatureRequest request, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RequestTemperature(request, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RequestTemperature(request, context, callback, cookie, false);
        }

        public void end_RequestTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _RequestTemperature_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TemperatureController_RequestTemperature> begin_RequestTemperature(TemperatureRequest iceP_request, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_RequestTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TemperatureController_RequestTemperature, object>(
                (Callback_TemperatureController_RequestTemperature cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _RequestTemperature_name, cookie, completedCallback);
            _iceI_RequestTemperature(iceP_request, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TemperatureController_GetTemperature> begin_GetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetTemperature(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetTemperature(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetTemperature(context, callback, cookie, false);
        }

        public float end_GetTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TemperatureController_GetTemperature> begin_GetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TemperatureController_GetTemperature, float>(
                (Callback_TemperatureController_GetTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetTemperature_name, cookie, completedCallback);
            _iceI_GetTemperature(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TemperatureControllerPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TemperatureControllerPrx r = b as TemperatureControllerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TemperatureControllerPrxHelper h = new TemperatureControllerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TemperatureControllerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TemperatureControllerPrx r = b as TemperatureControllerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TemperatureControllerPrxHelper h = new TemperatureControllerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TemperatureControllerPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TemperatureControllerPrxHelper h = new TemperatureControllerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TemperatureControllerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TemperatureControllerPrxHelper h = new TemperatureControllerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TemperatureControllerPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TemperatureControllerPrx r = b as TemperatureControllerPrx;
            if(r == null)
            {
                TemperatureControllerPrxHelper h = new TemperatureControllerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TemperatureControllerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TemperatureControllerPrxHelper h = new TemperatureControllerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::TemperatureController"
        };

        public static string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TemperatureControllerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TemperatureControllerPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TemperatureControllerPrxHelper result = new TemperatureControllerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class OvenPrxHelper : global::Ice.ObjectPrxHelperBase, OvenPrx
    {
        public OvenPrxHelper()
        {
        }

        public OvenPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetEnergyConsumptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_RequestTemperatureAsync(request, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetTemperatureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void SetProgram(OvenProgram program, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_SetProgramAsync(program, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public OvenProgram GetProgram(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetProgramAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetName_name = "GetName";

        private void _iceI_GetName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetName_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetEnergyConsumptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetEnergyConsumptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetEnergyConsumptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetEnergyConsumption_name = "GetEnergyConsumption";

        private void _iceI_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetEnergyConsumption_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task RequestTemperatureAsync(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_RequestTemperatureAsync(request, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_RequestTemperatureAsync(TemperatureRequest iceP_request, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_RequestTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_RequestTemperature(iceP_request, context, synchronous, completed);
            return completed.Task;
        }

        private const string _RequestTemperature_name = "RequestTemperature";

        private void _iceI_RequestTemperature(TemperatureRequest iceP_request, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _RequestTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_request.ice_writeMembers(ostr);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(UnsuccessfulOperationException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<float> GetTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetTemperatureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetTemperatureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetTemperature(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetTemperature_name = "GetTemperature";

        private void _iceI_GetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task SetProgramAsync(OvenProgram program, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_SetProgramAsync(program, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_SetProgramAsync(OvenProgram iceP_program, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_SetProgram(iceP_program, context, synchronous, completed);
            return completed.Task;
        }

        private const string _SetProgram_name = "SetProgram";

        private void _iceI_SetProgram(OvenProgram iceP_program, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _SetProgram_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_program, 3);
                });
        }

        public global::System.Threading.Tasks.Task<OvenProgram> GetProgramAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetProgramAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<OvenProgram> _iceI_GetProgramAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetProgram_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<OvenProgram>(progress, cancel);
            _iceI_GetProgram(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetProgram_name = "GetProgram";

        private void _iceI_GetProgram(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<OvenProgram>(completed);
            outAsync.invoke(
                _GetProgram_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    OvenProgram ret;
                    ret = (OvenProgram)istr.readEnum(3);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(context, callback, cookie, false);
        }

        public string end_GetName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetName, string>(
                (Callback_Device_GetName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetName_name, cookie, completedCallback);
            _iceI_GetName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetEnergyConsumption(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(context, callback, cookie, false);
        }

        public float end_GetEnergyConsumption(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetEnergyConsumption_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetEnergyConsumption, float>(
                (Callback_Device_GetEnergyConsumption cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetEnergyConsumption_name, cookie, completedCallback);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TemperatureController_RequestTemperature> begin_RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_RequestTemperature(request, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_RequestTemperature(TemperatureRequest request, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RequestTemperature(request, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RequestTemperature(request, context, callback, cookie, false);
        }

        public void end_RequestTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _RequestTemperature_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TemperatureController_RequestTemperature> begin_RequestTemperature(TemperatureRequest iceP_request, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_RequestTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TemperatureController_RequestTemperature, object>(
                (Callback_TemperatureController_RequestTemperature cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _RequestTemperature_name, cookie, completedCallback);
            _iceI_RequestTemperature(iceP_request, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TemperatureController_GetTemperature> begin_GetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetTemperature(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetTemperature(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetTemperature(context, callback, cookie, false);
        }

        public float end_GetTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TemperatureController_GetTemperature> begin_GetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TemperatureController_GetTemperature, float>(
                (Callback_TemperatureController_GetTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetTemperature_name, cookie, completedCallback);
            _iceI_GetTemperature(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Oven_SetProgram> begin_SetProgram(OvenProgram program, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_SetProgram(program, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_SetProgram(OvenProgram program, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_SetProgram(program, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_SetProgram(OvenProgram program, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_SetProgram(program, context, callback, cookie, false);
        }

        public void end_SetProgram(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _SetProgram_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Oven_SetProgram> begin_SetProgram(OvenProgram iceP_program, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Oven_SetProgram, object>(
                (Callback_Oven_SetProgram cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _SetProgram_name, cookie, completedCallback);
            _iceI_SetProgram(iceP_program, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Oven_GetProgram> begin_GetProgram(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetProgram(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetProgram(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetProgram(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetProgram(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetProgram(context, callback, cookie, false);
        }

        public OvenProgram end_GetProgram(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetProgram_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<OvenProgram>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Oven_GetProgram> begin_GetProgram(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetProgram_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Oven_GetProgram, OvenProgram>(
                (Callback_Oven_GetProgram cb, OvenProgram ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetProgram_name, cookie, completedCallback);
            _iceI_GetProgram(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static OvenPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OvenPrx r = b as OvenPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                OvenPrxHelper h = new OvenPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static OvenPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            OvenPrx r = b as OvenPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                OvenPrxHelper h = new OvenPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static OvenPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    OvenPrxHelper h = new OvenPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OvenPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    OvenPrxHelper h = new OvenPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OvenPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OvenPrx r = b as OvenPrx;
            if(r == null)
            {
                OvenPrxHelper h = new OvenPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static OvenPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            OvenPrxHelper h = new OvenPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::Oven",
            "::SmartHome::TemperatureController"
        };

        public static string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, OvenPrx v)
        {
            ostr.writeProxy(v);
        }

        public static OvenPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                OvenPrxHelper result = new OvenPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class AirConditioningPrxHelper : global::Ice.ObjectPrxHelperBase, AirConditioningPrx
    {
        public AirConditioningPrxHelper()
        {
        }

        public AirConditioningPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetEnergyConsumptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_RequestTemperatureAsync(request, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetTemperatureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetFilterQuality(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetFilterQualityAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetName_name = "GetName";

        private void _iceI_GetName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetName_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetEnergyConsumptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetEnergyConsumptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetEnergyConsumptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetEnergyConsumption_name = "GetEnergyConsumption";

        private void _iceI_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetEnergyConsumption_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task RequestTemperatureAsync(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_RequestTemperatureAsync(request, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_RequestTemperatureAsync(TemperatureRequest iceP_request, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_RequestTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_RequestTemperature(iceP_request, context, synchronous, completed);
            return completed.Task;
        }

        private const string _RequestTemperature_name = "RequestTemperature";

        private void _iceI_RequestTemperature(TemperatureRequest iceP_request, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _RequestTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    iceP_request.ice_writeMembers(ostr);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(UnsuccessfulOperationException)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<float> GetTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetTemperatureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetTemperatureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetTemperature(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetTemperature_name = "GetTemperature";

        private void _iceI_GetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetFilterQualityAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetFilterQualityAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetFilterQualityAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetFilterQuality_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetFilterQuality(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetFilterQuality_name = "GetFilterQuality";

        private void _iceI_GetFilterQuality(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetFilterQuality_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(context, callback, cookie, false);
        }

        public string end_GetName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetName, string>(
                (Callback_Device_GetName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetName_name, cookie, completedCallback);
            _iceI_GetName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetEnergyConsumption(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(context, callback, cookie, false);
        }

        public float end_GetEnergyConsumption(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetEnergyConsumption_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetEnergyConsumption, float>(
                (Callback_Device_GetEnergyConsumption cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetEnergyConsumption_name, cookie, completedCallback);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TemperatureController_RequestTemperature> begin_RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_RequestTemperature(request, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_RequestTemperature(TemperatureRequest request, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RequestTemperature(request, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_RequestTemperature(TemperatureRequest request, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RequestTemperature(request, context, callback, cookie, false);
        }

        public void end_RequestTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _RequestTemperature_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TemperatureController_RequestTemperature> begin_RequestTemperature(TemperatureRequest iceP_request, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_RequestTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TemperatureController_RequestTemperature, object>(
                (Callback_TemperatureController_RequestTemperature cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _RequestTemperature_name, cookie, completedCallback);
            _iceI_RequestTemperature(iceP_request, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TemperatureController_GetTemperature> begin_GetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetTemperature(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetTemperature(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetTemperature(context, callback, cookie, false);
        }

        public float end_GetTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TemperatureController_GetTemperature> begin_GetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TemperatureController_GetTemperature, float>(
                (Callback_TemperatureController_GetTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetTemperature_name, cookie, completedCallback);
            _iceI_GetTemperature(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_AirConditioning_GetFilterQuality> begin_GetFilterQuality(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetFilterQuality(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetFilterQuality(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetFilterQuality(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetFilterQuality(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetFilterQuality(context, callback, cookie, false);
        }

        public float end_GetFilterQuality(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetFilterQuality_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_AirConditioning_GetFilterQuality> begin_GetFilterQuality(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetFilterQuality_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_AirConditioning_GetFilterQuality, float>(
                (Callback_AirConditioning_GetFilterQuality cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetFilterQuality_name, cookie, completedCallback);
            _iceI_GetFilterQuality(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static AirConditioningPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            AirConditioningPrx r = b as AirConditioningPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                AirConditioningPrxHelper h = new AirConditioningPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AirConditioningPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            AirConditioningPrx r = b as AirConditioningPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                AirConditioningPrxHelper h = new AirConditioningPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AirConditioningPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    AirConditioningPrxHelper h = new AirConditioningPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static AirConditioningPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    AirConditioningPrxHelper h = new AirConditioningPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static AirConditioningPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            AirConditioningPrx r = b as AirConditioningPrx;
            if(r == null)
            {
                AirConditioningPrxHelper h = new AirConditioningPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AirConditioningPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            AirConditioningPrxHelper h = new AirConditioningPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::AirConditioning",
            "::SmartHome::Device",
            "::SmartHome::TemperatureController"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, AirConditioningPrx v)
        {
            ostr.writeProxy(v);
        }

        public static AirConditioningPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                AirConditioningPrxHelper result = new AirConditioningPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class SolarPanelClusterPrxHelper : global::Ice.ObjectPrxHelperBase, SolarPanelClusterPrx
    {
        public SolarPanelClusterPrxHelper()
        {
        }

        public SolarPanelClusterPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetEnergyConsumptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float PredictDailyProduction(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_PredictDailyProductionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetName_name = "GetName";

        private void _iceI_GetName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetName_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetEnergyConsumptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetEnergyConsumptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetEnergyConsumptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetEnergyConsumption_name = "GetEnergyConsumption";

        private void _iceI_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetEnergyConsumption_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> PredictDailyProductionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_PredictDailyProductionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_PredictDailyProductionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_PredictDailyProduction_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_PredictDailyProduction(context, synchronous, completed);
            return completed.Task;
        }

        private const string _PredictDailyProduction_name = "PredictDailyProduction";

        private void _iceI_PredictDailyProduction(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _PredictDailyProduction_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(context, callback, cookie, false);
        }

        public string end_GetName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetName, string>(
                (Callback_Device_GetName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetName_name, cookie, completedCallback);
            _iceI_GetName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetEnergyConsumption(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(context, callback, cookie, false);
        }

        public float end_GetEnergyConsumption(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetEnergyConsumption_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetEnergyConsumption, float>(
                (Callback_Device_GetEnergyConsumption cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetEnergyConsumption_name, cookie, completedCallback);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SolarPanelCluster_PredictDailyProduction> begin_PredictDailyProduction(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_PredictDailyProduction(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_PredictDailyProduction(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_PredictDailyProduction(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_PredictDailyProduction(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_PredictDailyProduction(context, callback, cookie, false);
        }

        public float end_PredictDailyProduction(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _PredictDailyProduction_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SolarPanelCluster_PredictDailyProduction> begin_PredictDailyProduction(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_PredictDailyProduction_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SolarPanelCluster_PredictDailyProduction, float>(
                (Callback_SolarPanelCluster_PredictDailyProduction cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _PredictDailyProduction_name, cookie, completedCallback);
            _iceI_PredictDailyProduction(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SolarPanelClusterPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SolarPanelClusterPrx r = b as SolarPanelClusterPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SolarPanelClusterPrxHelper h = new SolarPanelClusterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SolarPanelClusterPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SolarPanelClusterPrx r = b as SolarPanelClusterPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SolarPanelClusterPrxHelper h = new SolarPanelClusterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SolarPanelClusterPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SolarPanelClusterPrxHelper h = new SolarPanelClusterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SolarPanelClusterPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SolarPanelClusterPrxHelper h = new SolarPanelClusterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SolarPanelClusterPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SolarPanelClusterPrx r = b as SolarPanelClusterPrx;
            if(r == null)
            {
                SolarPanelClusterPrxHelper h = new SolarPanelClusterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SolarPanelClusterPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SolarPanelClusterPrxHelper h = new SolarPanelClusterPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::SolarPanelCluster"
        };

        public static string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SolarPanelClusterPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SolarPanelClusterPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SolarPanelClusterPrxHelper result = new SolarPanelClusterPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class RefrigeratorPrxHelper : global::Ice.ObjectPrxHelperBase, RefrigeratorPrx
    {
        public RefrigeratorPrxHelper()
        {
        }

        public RefrigeratorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetEnergyConsumptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public string[] GetProductList(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetProductListAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void AddProduct(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_AddProductAsync(product, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void RemoveProduct(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_RemoveProductAsync(product, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetName_name = "GetName";

        private void _iceI_GetName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetName_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetEnergyConsumptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetEnergyConsumptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetEnergyConsumptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetEnergyConsumption_name = "GetEnergyConsumption";

        private void _iceI_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetEnergyConsumption_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<string[]> GetProductListAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetProductListAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_GetProductListAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetProductList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_GetProductList(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetProductList_name = "GetProductList";

        private void _iceI_GetProductList(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _GetProductList_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = ListHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task AddProductAsync(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_AddProductAsync(product, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_AddProductAsync(string iceP_product, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_AddProduct(iceP_product, context, synchronous, completed);
            return completed.Task;
        }

        private const string _AddProduct_name = "AddProduct";

        private void _iceI_AddProduct(string iceP_product, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _AddProduct_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_product);
                });
        }

        public global::System.Threading.Tasks.Task RemoveProductAsync(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_RemoveProductAsync(product, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_RemoveProductAsync(string iceP_product, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_RemoveProduct(iceP_product, context, synchronous, completed);
            return completed.Task;
        }

        private const string _RemoveProduct_name = "RemoveProduct";

        private void _iceI_RemoveProduct(string iceP_product, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _RemoveProduct_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_product);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(context, callback, cookie, false);
        }

        public string end_GetName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetName, string>(
                (Callback_Device_GetName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetName_name, cookie, completedCallback);
            _iceI_GetName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetEnergyConsumption(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(context, callback, cookie, false);
        }

        public float end_GetEnergyConsumption(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetEnergyConsumption_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetEnergyConsumption, float>(
                (Callback_Device_GetEnergyConsumption cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetEnergyConsumption_name, cookie, completedCallback);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Refrigerator_GetProductList> begin_GetProductList(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetProductList(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetProductList(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetProductList(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetProductList(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetProductList(context, callback, cookie, false);
        }

        public string[] end_GetProductList(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetProductList_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Refrigerator_GetProductList> begin_GetProductList(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetProductList_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Refrigerator_GetProductList, string[]>(
                (Callback_Refrigerator_GetProductList cb, string[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetProductList_name, cookie, completedCallback);
            _iceI_GetProductList(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Refrigerator_AddProduct> begin_AddProduct(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_AddProduct(product, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_AddProduct(string product, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_AddProduct(product, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_AddProduct(string product, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_AddProduct(product, context, callback, cookie, false);
        }

        public void end_AddProduct(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _AddProduct_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Refrigerator_AddProduct> begin_AddProduct(string iceP_product, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Refrigerator_AddProduct, object>(
                (Callback_Refrigerator_AddProduct cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _AddProduct_name, cookie, completedCallback);
            _iceI_AddProduct(iceP_product, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Refrigerator_RemoveProduct> begin_RemoveProduct(string product, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_RemoveProduct(product, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_RemoveProduct(string product, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RemoveProduct(product, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_RemoveProduct(string product, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_RemoveProduct(product, context, callback, cookie, false);
        }

        public void end_RemoveProduct(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _RemoveProduct_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Refrigerator_RemoveProduct> begin_RemoveProduct(string iceP_product, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Refrigerator_RemoveProduct, object>(
                (Callback_Refrigerator_RemoveProduct cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _RemoveProduct_name, cookie, completedCallback);
            _iceI_RemoveProduct(iceP_product, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static RefrigeratorPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RefrigeratorPrx r = b as RefrigeratorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                RefrigeratorPrxHelper h = new RefrigeratorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RefrigeratorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            RefrigeratorPrx r = b as RefrigeratorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                RefrigeratorPrxHelper h = new RefrigeratorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RefrigeratorPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    RefrigeratorPrxHelper h = new RefrigeratorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static RefrigeratorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    RefrigeratorPrxHelper h = new RefrigeratorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static RefrigeratorPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RefrigeratorPrx r = b as RefrigeratorPrx;
            if(r == null)
            {
                RefrigeratorPrxHelper h = new RefrigeratorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static RefrigeratorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            RefrigeratorPrxHelper h = new RefrigeratorPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::Refrigerator"
        };

        public static string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, RefrigeratorPrx v)
        {
            ostr.writeProxy(v);
        }

        public static RefrigeratorPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                RefrigeratorPrxHelper result = new RefrigeratorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class SensorPrxHelper : global::Ice.ObjectPrxHelperBase, SensorPrx
    {
        public SensorPrxHelper()
        {
        }

        public SensorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetEnergyConsumptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SensorState GetState(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetStateAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetName_name = "GetName";

        private void _iceI_GetName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetName_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetEnergyConsumptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetEnergyConsumptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetEnergyConsumptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetEnergyConsumption_name = "GetEnergyConsumption";

        private void _iceI_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetEnergyConsumption_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SensorState> GetStateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetStateAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SensorState> _iceI_GetStateAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetState_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SensorState>(progress, cancel);
            _iceI_GetState(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetState_name = "GetState";

        private void _iceI_GetState(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SensorState>(completed);
            outAsync.invoke(
                _GetState_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    SensorState ret;
                    ret = (SensorState)istr.readEnum(2);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(context, callback, cookie, false);
        }

        public string end_GetName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetName, string>(
                (Callback_Device_GetName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetName_name, cookie, completedCallback);
            _iceI_GetName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetEnergyConsumption(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(context, callback, cookie, false);
        }

        public float end_GetEnergyConsumption(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetEnergyConsumption_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetEnergyConsumption, float>(
                (Callback_Device_GetEnergyConsumption cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetEnergyConsumption_name, cookie, completedCallback);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Sensor_GetState> begin_GetState(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetState(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetState(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetState(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetState(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetState(context, callback, cookie, false);
        }

        public SensorState end_GetState(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetState_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<SensorState>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Sensor_GetState> begin_GetState(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetState_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Sensor_GetState, SensorState>(
                (Callback_Sensor_GetState cb, SensorState ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetState_name, cookie, completedCallback);
            _iceI_GetState(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SensorPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SensorPrx r = b as SensorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SensorPrxHelper h = new SensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SensorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SensorPrx r = b as SensorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SensorPrxHelper h = new SensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SensorPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SensorPrxHelper h = new SensorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SensorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SensorPrxHelper h = new SensorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SensorPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SensorPrx r = b as SensorPrx;
            if(r == null)
            {
                SensorPrxHelper h = new SensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SensorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SensorPrxHelper h = new SensorPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::Sensor"
        };

        public static string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SensorPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SensorPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SensorPrxHelper result = new SensorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class TemperatureSensorPrxHelper : global::Ice.ObjectPrxHelperBase, TemperatureSensorPrx
    {
        public TemperatureSensorPrxHelper()
        {
        }

        public TemperatureSensorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetEnergyConsumptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SensorState GetState(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetStateAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetTemperarure(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetTemperarureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetName_name = "GetName";

        private void _iceI_GetName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetName_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetEnergyConsumptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetEnergyConsumptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetEnergyConsumptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetEnergyConsumption_name = "GetEnergyConsumption";

        private void _iceI_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetEnergyConsumption_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SensorState> GetStateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetStateAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SensorState> _iceI_GetStateAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetState_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SensorState>(progress, cancel);
            _iceI_GetState(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetState_name = "GetState";

        private void _iceI_GetState(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SensorState>(completed);
            outAsync.invoke(
                _GetState_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    SensorState ret;
                    ret = (SensorState)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetTemperarureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetTemperarureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetTemperarureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetTemperarure_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetTemperarure(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetTemperarure_name = "GetTemperarure";

        private void _iceI_GetTemperarure(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetTemperarure_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(context, callback, cookie, false);
        }

        public string end_GetName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetName, string>(
                (Callback_Device_GetName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetName_name, cookie, completedCallback);
            _iceI_GetName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetEnergyConsumption(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(context, callback, cookie, false);
        }

        public float end_GetEnergyConsumption(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetEnergyConsumption_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetEnergyConsumption, float>(
                (Callback_Device_GetEnergyConsumption cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetEnergyConsumption_name, cookie, completedCallback);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Sensor_GetState> begin_GetState(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetState(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetState(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetState(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetState(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetState(context, callback, cookie, false);
        }

        public SensorState end_GetState(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetState_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<SensorState>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Sensor_GetState> begin_GetState(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetState_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Sensor_GetState, SensorState>(
                (Callback_Sensor_GetState cb, SensorState ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetState_name, cookie, completedCallback);
            _iceI_GetState(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_TemperatureSensor_GetTemperarure> begin_GetTemperarure(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetTemperarure(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetTemperarure(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetTemperarure(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetTemperarure(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetTemperarure(context, callback, cookie, false);
        }

        public float end_GetTemperarure(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetTemperarure_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_TemperatureSensor_GetTemperarure> begin_GetTemperarure(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetTemperarure_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TemperatureSensor_GetTemperarure, float>(
                (Callback_TemperatureSensor_GetTemperarure cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetTemperarure_name, cookie, completedCallback);
            _iceI_GetTemperarure(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static TemperatureSensorPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TemperatureSensorPrx r = b as TemperatureSensorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                TemperatureSensorPrxHelper h = new TemperatureSensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TemperatureSensorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            TemperatureSensorPrx r = b as TemperatureSensorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                TemperatureSensorPrxHelper h = new TemperatureSensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TemperatureSensorPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    TemperatureSensorPrxHelper h = new TemperatureSensorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TemperatureSensorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    TemperatureSensorPrxHelper h = new TemperatureSensorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static TemperatureSensorPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            TemperatureSensorPrx r = b as TemperatureSensorPrx;
            if(r == null)
            {
                TemperatureSensorPrxHelper h = new TemperatureSensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static TemperatureSensorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            TemperatureSensorPrxHelper h = new TemperatureSensorPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::Sensor",
            "::SmartHome::TemperatureSensor"
        };

        public static string ice_staticId()
        {
            return _ids[3];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, TemperatureSensorPrx v)
        {
            ostr.writeProxy(v);
        }

        public static TemperatureSensorPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                TemperatureSensorPrxHelper result = new TemperatureSensorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    [global::System.Serializable]
    public sealed class AirQualitySensorPrxHelper : global::Ice.ObjectPrxHelperBase, AirQualitySensorPrx
    {
        public AirQualitySensorPrxHelper()
        {
        }

        public AirQualitySensorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetEnergyConsumptionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SensorState GetState(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetStateAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float GetPollution(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetPollutionAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> GetNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetNameAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_GetNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_GetName(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetName_name = "GetName";

        private void _iceI_GetName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _GetName_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetEnergyConsumptionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetEnergyConsumptionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetEnergyConsumptionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetEnergyConsumption_name = "GetEnergyConsumption";

        private void _iceI_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetEnergyConsumption_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SensorState> GetStateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetStateAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SensorState> _iceI_GetStateAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetState_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SensorState>(progress, cancel);
            _iceI_GetState(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetState_name = "GetState";

        private void _iceI_GetState(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SensorState>(completed);
            outAsync.invoke(
                _GetState_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    SensorState ret;
                    ret = (SensorState)istr.readEnum(2);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> GetPollutionAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_GetPollutionAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_GetPollutionAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetPollution_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_GetPollution(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetPollution_name = "GetPollution";

        private void _iceI_GetPollution(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _GetPollution_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetName(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetName(context, callback, cookie, false);
        }

        public string end_GetName(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetName_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetName> begin_GetName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetName_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetName, string>(
                (Callback_Device_GetName cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetName_name, cookie, completedCallback);
            _iceI_GetName(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetEnergyConsumption(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetEnergyConsumption(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetEnergyConsumption(context, callback, cookie, false);
        }

        public float end_GetEnergyConsumption(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetEnergyConsumption_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Device_GetEnergyConsumption> begin_GetEnergyConsumption(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetEnergyConsumption_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Device_GetEnergyConsumption, float>(
                (Callback_Device_GetEnergyConsumption cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetEnergyConsumption_name, cookie, completedCallback);
            _iceI_GetEnergyConsumption(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Sensor_GetState> begin_GetState(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetState(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetState(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetState(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetState(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetState(context, callback, cookie, false);
        }

        public SensorState end_GetState(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetState_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<SensorState>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Sensor_GetState> begin_GetState(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetState_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Sensor_GetState, SensorState>(
                (Callback_Sensor_GetState cb, SensorState ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetState_name, cookie, completedCallback);
            _iceI_GetState(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_AirQualitySensor_GetPollution> begin_GetPollution(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_GetPollution(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_GetPollution(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetPollution(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_GetPollution(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetPollution(context, callback, cookie, false);
        }

        public float end_GetPollution(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetPollution_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_AirQualitySensor_GetPollution> begin_GetPollution(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetPollution_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_AirQualitySensor_GetPollution, float>(
                (Callback_AirQualitySensor_GetPollution cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetPollution_name, cookie, completedCallback);
            _iceI_GetPollution(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static AirQualitySensorPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            AirQualitySensorPrx r = b as AirQualitySensorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                AirQualitySensorPrxHelper h = new AirQualitySensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AirQualitySensorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            AirQualitySensorPrx r = b as AirQualitySensorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                AirQualitySensorPrxHelper h = new AirQualitySensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AirQualitySensorPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    AirQualitySensorPrxHelper h = new AirQualitySensorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static AirQualitySensorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    AirQualitySensorPrxHelper h = new AirQualitySensorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static AirQualitySensorPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            AirQualitySensorPrx r = b as AirQualitySensorPrx;
            if(r == null)
            {
                AirQualitySensorPrxHelper h = new AirQualitySensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AirQualitySensorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            AirQualitySensorPrxHelper h = new AirQualitySensorPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::AirQualitySensor",
            "::SmartHome::Device",
            "::SmartHome::Sensor"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, AirQualitySensorPrx v)
        {
            ostr.writeProxy(v);
        }

        public static AirQualitySensorPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                AirQualitySensorPrxHelper result = new AirQualitySensorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace SmartHome
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class SmartRoomDisp_ : global::Ice.ObjectImpl, SmartRoom
    {
        #region Slice operations

        public abstract string GetName(global::Ice.Current current = null);

        public abstract string[] GetDevicesNames(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::SmartRoom"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetName(SmartRoom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetName(current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetDevicesNames(SmartRoom obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetDevicesNames(current);
            var ostr = inS.startWriteParams();
            ListHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetDevicesNames",
            "GetName",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_GetDevicesNames(this, inS, current);
                }
                case 1:
                {
                    return iceD_GetName(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class SmartBuildingDisp_ : global::Ice.ObjectImpl, SmartBuilding
    {
        #region Slice operations

        public abstract string[] GetRoomsNames(global::Ice.Current current = null);

        public abstract string GetTypeOfDevice(string deviceName, global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract string[] GetDevicesNames(global::Ice.Current current = null);

        public abstract string GetName(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::SmartBuilding",
            "::SmartHome::SmartRoom"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetRoomsNames(SmartBuilding obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetRoomsNames(current);
            var ostr = inS.startWriteParams();
            ListHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetTypeOfDevice(SmartBuilding obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            string iceP_deviceName;
            iceP_deviceName = istr.readString();
            inS.endReadParams();
            var ret = obj.GetTypeOfDevice(iceP_deviceName, current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetDevicesNames",
            "GetName",
            "GetRoomsNames",
            "GetTypeOfDevice",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return SmartRoomDisp_.iceD_GetDevicesNames(this, inS, current);
                }
                case 1:
                {
                    return SmartRoomDisp_.iceD_GetName(this, inS, current);
                }
                case 2:
                {
                    return iceD_GetRoomsNames(this, inS, current);
                }
                case 3:
                {
                    return iceD_GetTypeOfDevice(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class DeviceDisp_ : global::Ice.ObjectImpl, Device
    {
        #region Slice operations

        public abstract string GetName(global::Ice.Current current = null);

        public abstract float GetEnergyConsumption(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetName(Device obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetName(current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetEnergyConsumption(Device obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetEnergyConsumption(current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetEnergyConsumption",
            "GetName",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_GetEnergyConsumption(this, inS, current);
                }
                case 1:
                {
                    return iceD_GetName(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class TemperatureControllerDisp_ : global::Ice.ObjectImpl, TemperatureController
    {
        #region Slice operations

        public abstract void RequestTemperature(TemperatureRequest request, global::Ice.Current current = null);

        public abstract float GetTemperature(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract float GetEnergyConsumption(global::Ice.Current current = null);

        public abstract string GetName(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::TemperatureController"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[2];
        }

        public static new string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_RequestTemperature(TemperatureController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            TemperatureRequest iceP_request;
            iceP_request = new TemperatureRequest();
            iceP_request.ice_readMembers(istr);
            inS.endReadParams();
            obj.RequestTemperature(iceP_request, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetTemperature(TemperatureController obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetTemperature(current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetEnergyConsumption",
            "GetName",
            "GetTemperature",
            "RequestTemperature",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return DeviceDisp_.iceD_GetEnergyConsumption(this, inS, current);
                }
                case 1:
                {
                    return DeviceDisp_.iceD_GetName(this, inS, current);
                }
                case 2:
                {
                    return iceD_GetTemperature(this, inS, current);
                }
                case 3:
                {
                    return iceD_RequestTemperature(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class OvenDisp_ : global::Ice.ObjectImpl, Oven
    {
        #region Slice operations

        public abstract void SetProgram(OvenProgram program, global::Ice.Current current = null);

        public abstract OvenProgram GetProgram(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract float GetEnergyConsumption(global::Ice.Current current = null);

        public abstract string GetName(global::Ice.Current current = null);

        public abstract float GetTemperature(global::Ice.Current current = null);

        public abstract void RequestTemperature(TemperatureRequest request, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::Oven",
            "::SmartHome::TemperatureController"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[2];
        }

        public static new string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_SetProgram(Oven obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            OvenProgram iceP_program;
            iceP_program = (OvenProgram)istr.readEnum(3);
            inS.endReadParams();
            obj.SetProgram(iceP_program, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetProgram(Oven obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetProgram(current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)ret, 3);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetEnergyConsumption",
            "GetName",
            "GetProgram",
            "GetTemperature",
            "RequestTemperature",
            "SetProgram",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return DeviceDisp_.iceD_GetEnergyConsumption(this, inS, current);
                }
                case 1:
                {
                    return DeviceDisp_.iceD_GetName(this, inS, current);
                }
                case 2:
                {
                    return iceD_GetProgram(this, inS, current);
                }
                case 3:
                {
                    return TemperatureControllerDisp_.iceD_GetTemperature(this, inS, current);
                }
                case 4:
                {
                    return TemperatureControllerDisp_.iceD_RequestTemperature(this, inS, current);
                }
                case 5:
                {
                    return iceD_SetProgram(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class AirConditioningDisp_ : global::Ice.ObjectImpl, AirConditioning
    {
        #region Slice operations

        public abstract float GetFilterQuality(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract float GetEnergyConsumption(global::Ice.Current current = null);

        public abstract string GetName(global::Ice.Current current = null);

        public abstract float GetTemperature(global::Ice.Current current = null);

        public abstract void RequestTemperature(TemperatureRequest request, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::AirConditioning",
            "::SmartHome::Device",
            "::SmartHome::TemperatureController"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetFilterQuality(AirConditioning obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetFilterQuality(current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetEnergyConsumption",
            "GetFilterQuality",
            "GetName",
            "GetTemperature",
            "RequestTemperature",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return DeviceDisp_.iceD_GetEnergyConsumption(this, inS, current);
                }
                case 1:
                {
                    return iceD_GetFilterQuality(this, inS, current);
                }
                case 2:
                {
                    return DeviceDisp_.iceD_GetName(this, inS, current);
                }
                case 3:
                {
                    return TemperatureControllerDisp_.iceD_GetTemperature(this, inS, current);
                }
                case 4:
                {
                    return TemperatureControllerDisp_.iceD_RequestTemperature(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class SolarPanelClusterDisp_ : global::Ice.ObjectImpl, SolarPanelCluster
    {
        #region Slice operations

        public abstract float PredictDailyProduction(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract float GetEnergyConsumption(global::Ice.Current current = null);

        public abstract string GetName(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::SolarPanelCluster"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[2];
        }

        public static new string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_PredictDailyProduction(SolarPanelCluster obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.PredictDailyProduction(current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetEnergyConsumption",
            "GetName",
            "PredictDailyProduction",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return DeviceDisp_.iceD_GetEnergyConsumption(this, inS, current);
                }
                case 1:
                {
                    return DeviceDisp_.iceD_GetName(this, inS, current);
                }
                case 2:
                {
                    return iceD_PredictDailyProduction(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class RefrigeratorDisp_ : global::Ice.ObjectImpl, Refrigerator
    {
        #region Slice operations

        public abstract string[] GetProductList(global::Ice.Current current = null);

        public abstract void AddProduct(string product, global::Ice.Current current = null);

        public abstract void RemoveProduct(string product, global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract float GetEnergyConsumption(global::Ice.Current current = null);

        public abstract string GetName(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::Refrigerator"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[2];
        }

        public static new string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetProductList(Refrigerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetProductList(current);
            var ostr = inS.startWriteParams();
            ListHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_AddProduct(Refrigerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_product;
            iceP_product = istr.readString();
            inS.endReadParams();
            obj.AddProduct(iceP_product, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_RemoveProduct(Refrigerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_product;
            iceP_product = istr.readString();
            inS.endReadParams();
            obj.RemoveProduct(iceP_product, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "AddProduct",
            "GetEnergyConsumption",
            "GetName",
            "GetProductList",
            "RemoveProduct",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_AddProduct(this, inS, current);
                }
                case 1:
                {
                    return DeviceDisp_.iceD_GetEnergyConsumption(this, inS, current);
                }
                case 2:
                {
                    return DeviceDisp_.iceD_GetName(this, inS, current);
                }
                case 3:
                {
                    return iceD_GetProductList(this, inS, current);
                }
                case 4:
                {
                    return iceD_RemoveProduct(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class SensorDisp_ : global::Ice.ObjectImpl, Sensor
    {
        #region Slice operations

        public abstract SensorState GetState(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract float GetEnergyConsumption(global::Ice.Current current = null);

        public abstract string GetName(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::Sensor"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[2];
        }

        public static new string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetState(Sensor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetState(current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)ret, 2);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetEnergyConsumption",
            "GetName",
            "GetState",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return DeviceDisp_.iceD_GetEnergyConsumption(this, inS, current);
                }
                case 1:
                {
                    return DeviceDisp_.iceD_GetName(this, inS, current);
                }
                case 2:
                {
                    return iceD_GetState(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class TemperatureSensorDisp_ : global::Ice.ObjectImpl, TemperatureSensor
    {
        #region Slice operations

        public abstract float GetTemperarure(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract float GetEnergyConsumption(global::Ice.Current current = null);

        public abstract string GetName(global::Ice.Current current = null);

        public abstract SensorState GetState(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::Device",
            "::SmartHome::Sensor",
            "::SmartHome::TemperatureSensor"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[3];
        }

        public static new string ice_staticId()
        {
            return _ids[3];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetTemperarure(TemperatureSensor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetTemperarure(current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetEnergyConsumption",
            "GetName",
            "GetState",
            "GetTemperarure",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return DeviceDisp_.iceD_GetEnergyConsumption(this, inS, current);
                }
                case 1:
                {
                    return DeviceDisp_.iceD_GetName(this, inS, current);
                }
                case 2:
                {
                    return SensorDisp_.iceD_GetState(this, inS, current);
                }
                case 3:
                {
                    return iceD_GetTemperarure(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
    public abstract class AirQualitySensorDisp_ : global::Ice.ObjectImpl, AirQualitySensor
    {
        #region Slice operations

        public abstract float GetPollution(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract float GetEnergyConsumption(global::Ice.Current current = null);

        public abstract string GetName(global::Ice.Current current = null);

        public abstract SensorState GetState(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHome::AirQualitySensor",
            "::SmartHome::Device",
            "::SmartHome::Sensor"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_GetPollution(AirQualitySensor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetPollution(current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetEnergyConsumption",
            "GetName",
            "GetPollution",
            "GetState",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return DeviceDisp_.iceD_GetEnergyConsumption(this, inS, current);
                }
                case 1:
                {
                    return DeviceDisp_.iceD_GetName(this, inS, current);
                }
                case 2:
                {
                    return iceD_GetPollution(this, inS, current);
                }
                case 3:
                {
                    return SensorDisp_.iceD_GetState(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
