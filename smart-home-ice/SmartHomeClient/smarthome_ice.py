# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `smarthome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if '_t_List' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_List = IcePy.defineSequence('::SmartHome::List', (), IcePy._t_string)

if 'Time' not in _M_SmartHome.__dict__:
    _M_SmartHome.Time = Ice.createTempClass()
    class Time(object):
        def __init__(self, hours=0, minutes=0, seconds=0):
            self.hours = hours
            self.minutes = minutes
            self.seconds = seconds

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.hours)
            _h = 5 * _h + Ice.getHash(self.minutes)
            _h = 5 * _h + Ice.getHash(self.seconds)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.Time):
                return NotImplemented
            else:
                if self.hours is None or other.hours is None:
                    if self.hours != other.hours:
                        return (-1 if self.hours is None else 1)
                else:
                    if self.hours < other.hours:
                        return -1
                    elif self.hours > other.hours:
                        return 1
                if self.minutes is None or other.minutes is None:
                    if self.minutes != other.minutes:
                        return (-1 if self.minutes is None else 1)
                else:
                    if self.minutes < other.minutes:
                        return -1
                    elif self.minutes > other.minutes:
                        return 1
                if self.seconds is None or other.seconds is None:
                    if self.seconds != other.seconds:
                        return (-1 if self.seconds is None else 1)
                else:
                    if self.seconds < other.seconds:
                        return -1
                    elif self.seconds > other.seconds:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Time)

        __repr__ = __str__

    _M_SmartHome._t_Time = IcePy.defineStruct('::SmartHome::Time', Time, (), (
        ('hours', (), IcePy._t_int),
        ('minutes', (), IcePy._t_int),
        ('seconds', (), IcePy._t_int)
    ))

    _M_SmartHome.Time = Time
    del Time

if 'TemperatureRequest' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureRequest = Ice.createTempClass()
    class TemperatureRequest(object):
        def __init__(self, temperature=0.0, start=Ice._struct_marker, duration=Ice._struct_marker):
            self.temperature = temperature
            if start is Ice._struct_marker:
                self.start = _M_SmartHome.Time()
            else:
                self.start = start
            if duration is Ice._struct_marker:
                self.duration = _M_SmartHome.Time()
            else:
                self.duration = duration

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.TemperatureRequest):
                return NotImplemented
            else:
                if self.temperature != other.temperature:
                    return False
                if self.start != other.start:
                    return False
                if self.duration != other.duration:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TemperatureRequest)

        __repr__ = __str__

    _M_SmartHome._t_TemperatureRequest = IcePy.defineStruct('::SmartHome::TemperatureRequest', TemperatureRequest, (), (
        ('temperature', (), IcePy._t_float),
        ('start', (), _M_SmartHome._t_Time),
        ('duration', (), _M_SmartHome._t_Time)
    ))

    _M_SmartHome.TemperatureRequest = TemperatureRequest
    del TemperatureRequest

if 'OvenProgram' not in _M_SmartHome.__dict__:
    _M_SmartHome.OvenProgram = Ice.createTempClass()
    class OvenProgram(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    OvenProgram.TurnedOff = OvenProgram("TurnedOff", 0)
    OvenProgram.HotAir = OvenProgram("HotAir", 1)
    OvenProgram.Grill = OvenProgram("Grill", 2)
    OvenProgram.ConvectionBaking = OvenProgram("ConvectionBaking", 3)
    OvenProgram._enumerators = { 0:OvenProgram.TurnedOff, 1:OvenProgram.HotAir, 2:OvenProgram.Grill, 3:OvenProgram.ConvectionBaking }

    _M_SmartHome._t_OvenProgram = IcePy.defineEnum('::SmartHome::OvenProgram', OvenProgram, (), OvenProgram._enumerators)

    _M_SmartHome.OvenProgram = OvenProgram
    del OvenProgram

if 'SensorState' not in _M_SmartHome.__dict__:
    _M_SmartHome.SensorState = Ice.createTempClass()
    class SensorState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    SensorState.Ok = SensorState("Ok", 0)
    SensorState.Warning = SensorState("Warning", 1)
    SensorState.Alarm = SensorState("Alarm", 2)
    SensorState._enumerators = { 0:SensorState.Ok, 1:SensorState.Warning, 2:SensorState.Alarm }

    _M_SmartHome._t_SensorState = IcePy.defineEnum('::SmartHome::SensorState', SensorState, (), SensorState._enumerators)

    _M_SmartHome.SensorState = SensorState
    del SensorState

if 'UnsuccessfulOperationException' not in _M_SmartHome.__dict__:
    _M_SmartHome.UnsuccessfulOperationException = Ice.createTempClass()
    class UnsuccessfulOperationException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::UnsuccessfulOperationException'

    _M_SmartHome._t_UnsuccessfulOperationException = IcePy.defineException('::SmartHome::UnsuccessfulOperationException', UnsuccessfulOperationException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    UnsuccessfulOperationException._ice_type = _M_SmartHome._t_UnsuccessfulOperationException

    _M_SmartHome.UnsuccessfulOperationException = UnsuccessfulOperationException
    del UnsuccessfulOperationException

_M_SmartHome._t_SmartRoom = IcePy.defineValue('::SmartHome::SmartRoom', Ice.Value, -1, (), False, True, None, ())

if 'SmartRoomPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SmartRoomPrx = Ice.createTempClass()
    class SmartRoomPrx(Ice.ObjectPrx):

        def GetName(self, context=None):
            return _M_SmartHome.SmartRoom._op_GetName.invoke(self, ((), context))

        def GetNameAsync(self, context=None):
            return _M_SmartHome.SmartRoom._op_GetName.invokeAsync(self, ((), context))

        def begin_GetName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartRoom._op_GetName.begin(self, ((), _response, _ex, _sent, context))

        def end_GetName(self, _r):
            return _M_SmartHome.SmartRoom._op_GetName.end(self, _r)

        def GetDevicesNames(self, context=None):
            return _M_SmartHome.SmartRoom._op_GetDevicesNames.invoke(self, ((), context))

        def GetDevicesNamesAsync(self, context=None):
            return _M_SmartHome.SmartRoom._op_GetDevicesNames.invokeAsync(self, ((), context))

        def begin_GetDevicesNames(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartRoom._op_GetDevicesNames.begin(self, ((), _response, _ex, _sent, context))

        def end_GetDevicesNames(self, _r):
            return _M_SmartHome.SmartRoom._op_GetDevicesNames.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SmartRoomPrx.ice_checkedCast(proxy, '::SmartHome::SmartRoom', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SmartRoomPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartRoom'
    _M_SmartHome._t_SmartRoomPrx = IcePy.defineProxy('::SmartHome::SmartRoom', SmartRoomPrx)

    _M_SmartHome.SmartRoomPrx = SmartRoomPrx
    del SmartRoomPrx

    _M_SmartHome.SmartRoom = Ice.createTempClass()
    class SmartRoom(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::SmartRoom')

        def ice_id(self, current=None):
            return '::SmartHome::SmartRoom'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartRoom'

        def GetName(self, current=None):
            raise NotImplementedError("servant method 'GetName' not implemented")

        def GetDevicesNames(self, current=None):
            raise NotImplementedError("servant method 'GetDevicesNames' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SmartRoomDisp)

        __repr__ = __str__

    _M_SmartHome._t_SmartRoomDisp = IcePy.defineClass('::SmartHome::SmartRoom', SmartRoom, (), None, ())
    SmartRoom._ice_type = _M_SmartHome._t_SmartRoomDisp

    SmartRoom._op_GetName = IcePy.Operation('GetName', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    SmartRoom._op_GetDevicesNames = IcePy.Operation('GetDevicesNames', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_List, False, 0), ())

    _M_SmartHome.SmartRoom = SmartRoom
    del SmartRoom

_M_SmartHome._t_SmartBuilding = IcePy.defineValue('::SmartHome::SmartBuilding', Ice.Value, -1, (), False, True, None, ())

if 'SmartBuildingPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SmartBuildingPrx = Ice.createTempClass()
    class SmartBuildingPrx(_M_SmartHome.SmartRoomPrx):

        def GetRoomsNames(self, context=None):
            return _M_SmartHome.SmartBuilding._op_GetRoomsNames.invoke(self, ((), context))

        def GetRoomsNamesAsync(self, context=None):
            return _M_SmartHome.SmartBuilding._op_GetRoomsNames.invokeAsync(self, ((), context))

        def begin_GetRoomsNames(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartBuilding._op_GetRoomsNames.begin(self, ((), _response, _ex, _sent, context))

        def end_GetRoomsNames(self, _r):
            return _M_SmartHome.SmartBuilding._op_GetRoomsNames.end(self, _r)

        def GetTypeOfDevice(self, deviceName, context=None):
            return _M_SmartHome.SmartBuilding._op_GetTypeOfDevice.invoke(self, ((deviceName, ), context))

        def GetTypeOfDeviceAsync(self, deviceName, context=None):
            return _M_SmartHome.SmartBuilding._op_GetTypeOfDevice.invokeAsync(self, ((deviceName, ), context))

        def begin_GetTypeOfDevice(self, deviceName, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartBuilding._op_GetTypeOfDevice.begin(self, ((deviceName, ), _response, _ex, _sent, context))

        def end_GetTypeOfDevice(self, _r):
            return _M_SmartHome.SmartBuilding._op_GetTypeOfDevice.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SmartBuildingPrx.ice_checkedCast(proxy, '::SmartHome::SmartBuilding', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SmartBuildingPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartBuilding'
    _M_SmartHome._t_SmartBuildingPrx = IcePy.defineProxy('::SmartHome::SmartBuilding', SmartBuildingPrx)

    _M_SmartHome.SmartBuildingPrx = SmartBuildingPrx
    del SmartBuildingPrx

    _M_SmartHome.SmartBuilding = Ice.createTempClass()
    class SmartBuilding(_M_SmartHome.SmartRoom):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::SmartBuilding', '::SmartHome::SmartRoom')

        def ice_id(self, current=None):
            return '::SmartHome::SmartBuilding'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartBuilding'

        def GetRoomsNames(self, current=None):
            raise NotImplementedError("servant method 'GetRoomsNames' not implemented")

        def GetTypeOfDevice(self, deviceName, current=None):
            raise NotImplementedError("servant method 'GetTypeOfDevice' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SmartBuildingDisp)

        __repr__ = __str__

    _M_SmartHome._t_SmartBuildingDisp = IcePy.defineClass('::SmartHome::SmartBuilding', SmartBuilding, (), None, (_M_SmartHome._t_SmartRoomDisp,))
    SmartBuilding._ice_type = _M_SmartHome._t_SmartBuildingDisp

    SmartBuilding._op_GetRoomsNames = IcePy.Operation('GetRoomsNames', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_List, False, 0), ())
    SmartBuilding._op_GetTypeOfDevice = IcePy.Operation('GetTypeOfDevice', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_SmartHome.SmartBuilding = SmartBuilding
    del SmartBuilding

_M_SmartHome._t_Device = IcePy.defineValue('::SmartHome::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def GetName(self, context=None):
            return _M_SmartHome.Device._op_GetName.invoke(self, ((), context))

        def GetNameAsync(self, context=None):
            return _M_SmartHome.Device._op_GetName.invokeAsync(self, ((), context))

        def begin_GetName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_GetName.begin(self, ((), _response, _ex, _sent, context))

        def end_GetName(self, _r):
            return _M_SmartHome.Device._op_GetName.end(self, _r)

        def GetEnergyConsumption(self, context=None):
            return _M_SmartHome.Device._op_GetEnergyConsumption.invoke(self, ((), context))

        def GetEnergyConsumptionAsync(self, context=None):
            return _M_SmartHome.Device._op_GetEnergyConsumption.invokeAsync(self, ((), context))

        def begin_GetEnergyConsumption(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_GetEnergyConsumption.begin(self, ((), _response, _ex, _sent, context))

        def end_GetEnergyConsumption(self, _r):
            return _M_SmartHome.Device._op_GetEnergyConsumption.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DevicePrx.ice_checkedCast(proxy, '::SmartHome::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'
    _M_SmartHome._t_DevicePrx = IcePy.defineProxy('::SmartHome::Device', DevicePrx)

    _M_SmartHome.DevicePrx = DevicePrx
    del DevicePrx

    _M_SmartHome.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device')

        def ice_id(self, current=None):
            return '::SmartHome::Device'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'

        def GetName(self, current=None):
            raise NotImplementedError("servant method 'GetName' not implemented")

        def GetEnergyConsumption(self, current=None):
            raise NotImplementedError("servant method 'GetEnergyConsumption' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceDisp)

        __repr__ = __str__

    _M_SmartHome._t_DeviceDisp = IcePy.defineClass('::SmartHome::Device', Device, (), None, ())
    Device._ice_type = _M_SmartHome._t_DeviceDisp

    Device._op_GetName = IcePy.Operation('GetName', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Device._op_GetEnergyConsumption = IcePy.Operation('GetEnergyConsumption', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_SmartHome.Device = Device
    del Device

_M_SmartHome._t_TemperatureController = IcePy.defineValue('::SmartHome::TemperatureController', Ice.Value, -1, (), False, True, None, ())

if 'TemperatureControllerPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureControllerPrx = Ice.createTempClass()
    class TemperatureControllerPrx(_M_SmartHome.DevicePrx):

        def RequestTemperature(self, request, context=None):
            return _M_SmartHome.TemperatureController._op_RequestTemperature.invoke(self, ((request, ), context))

        def RequestTemperatureAsync(self, request, context=None):
            return _M_SmartHome.TemperatureController._op_RequestTemperature.invokeAsync(self, ((request, ), context))

        def begin_RequestTemperature(self, request, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TemperatureController._op_RequestTemperature.begin(self, ((request, ), _response, _ex, _sent, context))

        def end_RequestTemperature(self, _r):
            return _M_SmartHome.TemperatureController._op_RequestTemperature.end(self, _r)

        def GetTemperature(self, context=None):
            return _M_SmartHome.TemperatureController._op_GetTemperature.invoke(self, ((), context))

        def GetTemperatureAsync(self, context=None):
            return _M_SmartHome.TemperatureController._op_GetTemperature.invokeAsync(self, ((), context))

        def begin_GetTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TemperatureController._op_GetTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_GetTemperature(self, _r):
            return _M_SmartHome.TemperatureController._op_GetTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.TemperatureControllerPrx.ice_checkedCast(proxy, '::SmartHome::TemperatureController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.TemperatureControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TemperatureController'
    _M_SmartHome._t_TemperatureControllerPrx = IcePy.defineProxy('::SmartHome::TemperatureController', TemperatureControllerPrx)

    _M_SmartHome.TemperatureControllerPrx = TemperatureControllerPrx
    del TemperatureControllerPrx

    _M_SmartHome.TemperatureController = Ice.createTempClass()
    class TemperatureController(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::TemperatureController')

        def ice_id(self, current=None):
            return '::SmartHome::TemperatureController'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TemperatureController'

        def RequestTemperature(self, request, current=None):
            raise NotImplementedError("servant method 'RequestTemperature' not implemented")

        def GetTemperature(self, current=None):
            raise NotImplementedError("servant method 'GetTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TemperatureControllerDisp)

        __repr__ = __str__

    _M_SmartHome._t_TemperatureControllerDisp = IcePy.defineClass('::SmartHome::TemperatureController', TemperatureController, (), None, (_M_SmartHome._t_DeviceDisp,))
    TemperatureController._ice_type = _M_SmartHome._t_TemperatureControllerDisp

    TemperatureController._op_RequestTemperature = IcePy.Operation('RequestTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_TemperatureRequest, False, 0),), (), None, (_M_SmartHome._t_UnsuccessfulOperationException,))
    TemperatureController._op_GetTemperature = IcePy.Operation('GetTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_SmartHome.TemperatureController = TemperatureController
    del TemperatureController

_M_SmartHome._t_Oven = IcePy.defineValue('::SmartHome::Oven', Ice.Value, -1, (), False, True, None, ())

if 'OvenPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.OvenPrx = Ice.createTempClass()
    class OvenPrx(_M_SmartHome.TemperatureControllerPrx):

        def SetProgram(self, program, context=None):
            return _M_SmartHome.Oven._op_SetProgram.invoke(self, ((program, ), context))

        def SetProgramAsync(self, program, context=None):
            return _M_SmartHome.Oven._op_SetProgram.invokeAsync(self, ((program, ), context))

        def begin_SetProgram(self, program, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_SetProgram.begin(self, ((program, ), _response, _ex, _sent, context))

        def end_SetProgram(self, _r):
            return _M_SmartHome.Oven._op_SetProgram.end(self, _r)

        def GetProgram(self, context=None):
            return _M_SmartHome.Oven._op_GetProgram.invoke(self, ((), context))

        def GetProgramAsync(self, context=None):
            return _M_SmartHome.Oven._op_GetProgram.invokeAsync(self, ((), context))

        def begin_GetProgram(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Oven._op_GetProgram.begin(self, ((), _response, _ex, _sent, context))

        def end_GetProgram(self, _r):
            return _M_SmartHome.Oven._op_GetProgram.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.OvenPrx.ice_checkedCast(proxy, '::SmartHome::Oven', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.OvenPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Oven'
    _M_SmartHome._t_OvenPrx = IcePy.defineProxy('::SmartHome::Oven', OvenPrx)

    _M_SmartHome.OvenPrx = OvenPrx
    del OvenPrx

    _M_SmartHome.Oven = Ice.createTempClass()
    class Oven(_M_SmartHome.TemperatureController):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Oven', '::SmartHome::TemperatureController')

        def ice_id(self, current=None):
            return '::SmartHome::Oven'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Oven'

        def SetProgram(self, program, current=None):
            raise NotImplementedError("servant method 'SetProgram' not implemented")

        def GetProgram(self, current=None):
            raise NotImplementedError("servant method 'GetProgram' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_OvenDisp)

        __repr__ = __str__

    _M_SmartHome._t_OvenDisp = IcePy.defineClass('::SmartHome::Oven', Oven, (), None, (_M_SmartHome._t_TemperatureControllerDisp,))
    Oven._ice_type = _M_SmartHome._t_OvenDisp

    Oven._op_SetProgram = IcePy.Operation('SetProgram', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_OvenProgram, False, 0),), (), None, ())
    Oven._op_GetProgram = IcePy.Operation('GetProgram', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_OvenProgram, False, 0), ())

    _M_SmartHome.Oven = Oven
    del Oven

_M_SmartHome._t_AirConditioning = IcePy.defineValue('::SmartHome::AirConditioning', Ice.Value, -1, (), False, True, None, ())

if 'AirConditioningPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.AirConditioningPrx = Ice.createTempClass()
    class AirConditioningPrx(_M_SmartHome.TemperatureControllerPrx):

        def GetFilterQuality(self, context=None):
            return _M_SmartHome.AirConditioning._op_GetFilterQuality.invoke(self, ((), context))

        def GetFilterQualityAsync(self, context=None):
            return _M_SmartHome.AirConditioning._op_GetFilterQuality.invokeAsync(self, ((), context))

        def begin_GetFilterQuality(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.AirConditioning._op_GetFilterQuality.begin(self, ((), _response, _ex, _sent, context))

        def end_GetFilterQuality(self, _r):
            return _M_SmartHome.AirConditioning._op_GetFilterQuality.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.AirConditioningPrx.ice_checkedCast(proxy, '::SmartHome::AirConditioning', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.AirConditioningPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::AirConditioning'
    _M_SmartHome._t_AirConditioningPrx = IcePy.defineProxy('::SmartHome::AirConditioning', AirConditioningPrx)

    _M_SmartHome.AirConditioningPrx = AirConditioningPrx
    del AirConditioningPrx

    _M_SmartHome.AirConditioning = Ice.createTempClass()
    class AirConditioning(_M_SmartHome.TemperatureController):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::AirConditioning', '::SmartHome::Device', '::SmartHome::TemperatureController')

        def ice_id(self, current=None):
            return '::SmartHome::AirConditioning'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::AirConditioning'

        def GetFilterQuality(self, current=None):
            raise NotImplementedError("servant method 'GetFilterQuality' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_AirConditioningDisp)

        __repr__ = __str__

    _M_SmartHome._t_AirConditioningDisp = IcePy.defineClass('::SmartHome::AirConditioning', AirConditioning, (), None, (_M_SmartHome._t_TemperatureControllerDisp,))
    AirConditioning._ice_type = _M_SmartHome._t_AirConditioningDisp

    AirConditioning._op_GetFilterQuality = IcePy.Operation('GetFilterQuality', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_SmartHome.AirConditioning = AirConditioning
    del AirConditioning

_M_SmartHome._t_SolarPanelCluster = IcePy.defineValue('::SmartHome::SolarPanelCluster', Ice.Value, -1, (), False, True, None, ())

if 'SolarPanelClusterPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SolarPanelClusterPrx = Ice.createTempClass()
    class SolarPanelClusterPrx(_M_SmartHome.DevicePrx):

        def PredictDailyProduction(self, context=None):
            return _M_SmartHome.SolarPanelCluster._op_PredictDailyProduction.invoke(self, ((), context))

        def PredictDailyProductionAsync(self, context=None):
            return _M_SmartHome.SolarPanelCluster._op_PredictDailyProduction.invokeAsync(self, ((), context))

        def begin_PredictDailyProduction(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SolarPanelCluster._op_PredictDailyProduction.begin(self, ((), _response, _ex, _sent, context))

        def end_PredictDailyProduction(self, _r):
            return _M_SmartHome.SolarPanelCluster._op_PredictDailyProduction.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SolarPanelClusterPrx.ice_checkedCast(proxy, '::SmartHome::SolarPanelCluster', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SolarPanelClusterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SolarPanelCluster'
    _M_SmartHome._t_SolarPanelClusterPrx = IcePy.defineProxy('::SmartHome::SolarPanelCluster', SolarPanelClusterPrx)

    _M_SmartHome.SolarPanelClusterPrx = SolarPanelClusterPrx
    del SolarPanelClusterPrx

    _M_SmartHome.SolarPanelCluster = Ice.createTempClass()
    class SolarPanelCluster(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::SolarPanelCluster')

        def ice_id(self, current=None):
            return '::SmartHome::SolarPanelCluster'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SolarPanelCluster'

        def PredictDailyProduction(self, current=None):
            raise NotImplementedError("servant method 'PredictDailyProduction' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SolarPanelClusterDisp)

        __repr__ = __str__

    _M_SmartHome._t_SolarPanelClusterDisp = IcePy.defineClass('::SmartHome::SolarPanelCluster', SolarPanelCluster, (), None, (_M_SmartHome._t_DeviceDisp,))
    SolarPanelCluster._ice_type = _M_SmartHome._t_SolarPanelClusterDisp

    SolarPanelCluster._op_PredictDailyProduction = IcePy.Operation('PredictDailyProduction', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_SmartHome.SolarPanelCluster = SolarPanelCluster
    del SolarPanelCluster

_M_SmartHome._t_Refrigerator = IcePy.defineValue('::SmartHome::Refrigerator', Ice.Value, -1, (), False, True, None, ())

if 'RefrigeratorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.RefrigeratorPrx = Ice.createTempClass()
    class RefrigeratorPrx(_M_SmartHome.DevicePrx):

        def GetProductList(self, context=None):
            return _M_SmartHome.Refrigerator._op_GetProductList.invoke(self, ((), context))

        def GetProductListAsync(self, context=None):
            return _M_SmartHome.Refrigerator._op_GetProductList.invokeAsync(self, ((), context))

        def begin_GetProductList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Refrigerator._op_GetProductList.begin(self, ((), _response, _ex, _sent, context))

        def end_GetProductList(self, _r):
            return _M_SmartHome.Refrigerator._op_GetProductList.end(self, _r)

        def AddProduct(self, product, context=None):
            return _M_SmartHome.Refrigerator._op_AddProduct.invoke(self, ((product, ), context))

        def AddProductAsync(self, product, context=None):
            return _M_SmartHome.Refrigerator._op_AddProduct.invokeAsync(self, ((product, ), context))

        def begin_AddProduct(self, product, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Refrigerator._op_AddProduct.begin(self, ((product, ), _response, _ex, _sent, context))

        def end_AddProduct(self, _r):
            return _M_SmartHome.Refrigerator._op_AddProduct.end(self, _r)

        def RemoveProduct(self, product, context=None):
            return _M_SmartHome.Refrigerator._op_RemoveProduct.invoke(self, ((product, ), context))

        def RemoveProductAsync(self, product, context=None):
            return _M_SmartHome.Refrigerator._op_RemoveProduct.invokeAsync(self, ((product, ), context))

        def begin_RemoveProduct(self, product, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Refrigerator._op_RemoveProduct.begin(self, ((product, ), _response, _ex, _sent, context))

        def end_RemoveProduct(self, _r):
            return _M_SmartHome.Refrigerator._op_RemoveProduct.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.RefrigeratorPrx.ice_checkedCast(proxy, '::SmartHome::Refrigerator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.RefrigeratorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Refrigerator'
    _M_SmartHome._t_RefrigeratorPrx = IcePy.defineProxy('::SmartHome::Refrigerator', RefrigeratorPrx)

    _M_SmartHome.RefrigeratorPrx = RefrigeratorPrx
    del RefrigeratorPrx

    _M_SmartHome.Refrigerator = Ice.createTempClass()
    class Refrigerator(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Refrigerator')

        def ice_id(self, current=None):
            return '::SmartHome::Refrigerator'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Refrigerator'

        def GetProductList(self, current=None):
            raise NotImplementedError("servant method 'GetProductList' not implemented")

        def AddProduct(self, product, current=None):
            raise NotImplementedError("servant method 'AddProduct' not implemented")

        def RemoveProduct(self, product, current=None):
            raise NotImplementedError("servant method 'RemoveProduct' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_RefrigeratorDisp)

        __repr__ = __str__

    _M_SmartHome._t_RefrigeratorDisp = IcePy.defineClass('::SmartHome::Refrigerator', Refrigerator, (), None, (_M_SmartHome._t_DeviceDisp,))
    Refrigerator._ice_type = _M_SmartHome._t_RefrigeratorDisp

    Refrigerator._op_GetProductList = IcePy.Operation('GetProductList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_List, False, 0), ())
    Refrigerator._op_AddProduct = IcePy.Operation('AddProduct', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Refrigerator._op_RemoveProduct = IcePy.Operation('RemoveProduct', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_SmartHome.Refrigerator = Refrigerator
    del Refrigerator

_M_SmartHome._t_Sensor = IcePy.defineValue('::SmartHome::Sensor', Ice.Value, -1, (), False, True, None, ())

if 'SensorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SensorPrx = Ice.createTempClass()
    class SensorPrx(_M_SmartHome.DevicePrx):

        def GetState(self, context=None):
            return _M_SmartHome.Sensor._op_GetState.invoke(self, ((), context))

        def GetStateAsync(self, context=None):
            return _M_SmartHome.Sensor._op_GetState.invokeAsync(self, ((), context))

        def begin_GetState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Sensor._op_GetState.begin(self, ((), _response, _ex, _sent, context))

        def end_GetState(self, _r):
            return _M_SmartHome.Sensor._op_GetState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SensorPrx.ice_checkedCast(proxy, '::SmartHome::Sensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Sensor'
    _M_SmartHome._t_SensorPrx = IcePy.defineProxy('::SmartHome::Sensor', SensorPrx)

    _M_SmartHome.SensorPrx = SensorPrx
    del SensorPrx

    _M_SmartHome.Sensor = Ice.createTempClass()
    class Sensor(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Sensor')

        def ice_id(self, current=None):
            return '::SmartHome::Sensor'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Sensor'

        def GetState(self, current=None):
            raise NotImplementedError("servant method 'GetState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SensorDisp)

        __repr__ = __str__

    _M_SmartHome._t_SensorDisp = IcePy.defineClass('::SmartHome::Sensor', Sensor, (), None, (_M_SmartHome._t_DeviceDisp,))
    Sensor._ice_type = _M_SmartHome._t_SensorDisp

    Sensor._op_GetState = IcePy.Operation('GetState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_SensorState, False, 0), ())

    _M_SmartHome.Sensor = Sensor
    del Sensor

_M_SmartHome._t_TemperatureSensor = IcePy.defineValue('::SmartHome::TemperatureSensor', Ice.Value, -1, (), False, True, None, ())

if 'TemperatureSensorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.TemperatureSensorPrx = Ice.createTempClass()
    class TemperatureSensorPrx(_M_SmartHome.SensorPrx):

        def GetTemperarure(self, context=None):
            return _M_SmartHome.TemperatureSensor._op_GetTemperarure.invoke(self, ((), context))

        def GetTemperarureAsync(self, context=None):
            return _M_SmartHome.TemperatureSensor._op_GetTemperarure.invokeAsync(self, ((), context))

        def begin_GetTemperarure(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TemperatureSensor._op_GetTemperarure.begin(self, ((), _response, _ex, _sent, context))

        def end_GetTemperarure(self, _r):
            return _M_SmartHome.TemperatureSensor._op_GetTemperarure.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.TemperatureSensorPrx.ice_checkedCast(proxy, '::SmartHome::TemperatureSensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.TemperatureSensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TemperatureSensor'
    _M_SmartHome._t_TemperatureSensorPrx = IcePy.defineProxy('::SmartHome::TemperatureSensor', TemperatureSensorPrx)

    _M_SmartHome.TemperatureSensorPrx = TemperatureSensorPrx
    del TemperatureSensorPrx

    _M_SmartHome.TemperatureSensor = Ice.createTempClass()
    class TemperatureSensor(_M_SmartHome.Sensor):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Sensor', '::SmartHome::TemperatureSensor')

        def ice_id(self, current=None):
            return '::SmartHome::TemperatureSensor'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TemperatureSensor'

        def GetTemperarure(self, current=None):
            raise NotImplementedError("servant method 'GetTemperarure' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TemperatureSensorDisp)

        __repr__ = __str__

    _M_SmartHome._t_TemperatureSensorDisp = IcePy.defineClass('::SmartHome::TemperatureSensor', TemperatureSensor, (), None, (_M_SmartHome._t_SensorDisp,))
    TemperatureSensor._ice_type = _M_SmartHome._t_TemperatureSensorDisp

    TemperatureSensor._op_GetTemperarure = IcePy.Operation('GetTemperarure', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_SmartHome.TemperatureSensor = TemperatureSensor
    del TemperatureSensor

_M_SmartHome._t_AirQualitySensor = IcePy.defineValue('::SmartHome::AirQualitySensor', Ice.Value, -1, (), False, True, None, ())

if 'AirQualitySensorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.AirQualitySensorPrx = Ice.createTempClass()
    class AirQualitySensorPrx(_M_SmartHome.SensorPrx):

        def GetPollution(self, context=None):
            return _M_SmartHome.AirQualitySensor._op_GetPollution.invoke(self, ((), context))

        def GetPollutionAsync(self, context=None):
            return _M_SmartHome.AirQualitySensor._op_GetPollution.invokeAsync(self, ((), context))

        def begin_GetPollution(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.AirQualitySensor._op_GetPollution.begin(self, ((), _response, _ex, _sent, context))

        def end_GetPollution(self, _r):
            return _M_SmartHome.AirQualitySensor._op_GetPollution.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.AirQualitySensorPrx.ice_checkedCast(proxy, '::SmartHome::AirQualitySensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.AirQualitySensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::AirQualitySensor'
    _M_SmartHome._t_AirQualitySensorPrx = IcePy.defineProxy('::SmartHome::AirQualitySensor', AirQualitySensorPrx)

    _M_SmartHome.AirQualitySensorPrx = AirQualitySensorPrx
    del AirQualitySensorPrx

    _M_SmartHome.AirQualitySensor = Ice.createTempClass()
    class AirQualitySensor(_M_SmartHome.Sensor):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::AirQualitySensor', '::SmartHome::Device', '::SmartHome::Sensor')

        def ice_id(self, current=None):
            return '::SmartHome::AirQualitySensor'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::AirQualitySensor'

        def GetPollution(self, current=None):
            raise NotImplementedError("servant method 'GetPollution' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_AirQualitySensorDisp)

        __repr__ = __str__

    _M_SmartHome._t_AirQualitySensorDisp = IcePy.defineClass('::SmartHome::AirQualitySensor', AirQualitySensor, (), None, (_M_SmartHome._t_SensorDisp,))
    AirQualitySensor._ice_type = _M_SmartHome._t_AirQualitySensorDisp

    AirQualitySensor._op_GetPollution = IcePy.Operation('GetPollution', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_SmartHome.AirQualitySensor = AirQualitySensor
    del AirQualitySensor

# End of module SmartHome
